# github repository Actions 페이지에 나타낼 이름
name: CI/CD

# event trigger
on:
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

     ## create application-secret.yml
    - name: make application-secret.yml
      run: echo ${{ secrets.SECRET_YML }} | base64 --decode > ./src/main/resources/application-secret.yml
      shell: bash
      
      ## create application-secret.yml
    - name: make application-prod.yml
      run: echo ${{ secrets.PROD_YML }}  | base64 --decode > ./application-prod.yml
      shell: bash

#     ## create application-prod.properties
#     - name: make application-prod.properties
#       if: contains(github.ref, 'main')
#       run: |
#           cd ./src/main/resources
#           touch ./application-prod.properties
#           echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
#       shell: bash

#     ## create firebase-key.json
#     - name: create firebase key
#       run: |
#         cd ./src/main/resources
#         ls -a .
#         touch ./firebase-service-key.json
#         echo "${{ secrets.FIREBASE_KEY }}" > ./firebase-service-key.json
#       shell: bash

    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build
      shell: bash

#    - name: Compile querydsl with Gradle
#      run: ./gradlew compilequerydsl

    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'master')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t mkkim999/seesaw .
          docker push mkkim999/seesaw

    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'master')
      with:
          host: ec2-3-36-172-10.ap-northeast-2.compute.amazonaws.com
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull mkkim999/seesaw
              docker-compose up -d
              docker image prune -f

  ## time
#   current-time:
#     needs: CI-CD
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get Current Time
#         uses: 1466587594/get-current-time@v2
#         id: current-time
#         with:
#           format: YYYY-MM-DDTHH:mm:ss
#           utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

#       - name: Print Current Time
#         run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
#         shell: bash

  ## slack
#   action-slack:
#     needs: CI-CD
#     runs-on: ubuntu-latest
#     steps:
#         - name: Slack Alarm
#           uses: 8398a7/action-slack@v3
#           with:
#               status: ${{ job.status }}
#               author_name: GitHub-Actions CI/CD
#               fields: repo,message,commit,author,ref,job,took
#           env:
#               SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#           if: always() # Pick up events even if the job fails or is canceled.
